#include <iostream>
#include <vector>
#include <list>
#include <map>
#include <set>
#include <algorithm>

using namespace std;

int mn(int a, int b);
int dod(int a, int b);

typedef int((*wskNaFunk)(int, int));
void weryf(int a, int b, wskNaFunk wf)
{
    if(wf(a,b) == 0)
        cout << "ZERO" << endl;
    else
        cout << "!ZERO" << endl;
}

class Point{
public:
    float x;
    float y;
    Point(float x, float y)
    {
        this->x = x;
        this->y = y;
    }
};
bool cmp(Point p1, Point p2)
{
    return p1.x < p2.x;
}

int main(int argc, char *argv[])
{
    vector <Point> v1;
    v1.push_back(Point(1,2));
    v1.push_back(Point(7,3));
    v1.push_back(Point(0,1));

    for(int i = 0 ; i < v1.size(); i++)
        cout << v1[i].x << " " << v1[i].y << endl;

    cout << "------" << endl;
    sort (v1.begin(), v1.end(), cmp);





    weryf(5,-5,mn);


    /*vector <int> v1;
    v1.push_back(0);
    v1.push_back(5);
    v1.push_back(6);
    v1.push_back(3);
    for(int i = 0; i < v1.size(); i++)
        cout << v1[i] << endl;*/

    /*list <int> l1;
    l1.push_back(5);
    l1.push_back(7);
    l1.push_front(13);
    for(list <int>::iterator it = l1.begin(); it != l1.end(); it++)
        cout << *it << endl;*/

    /*map <string, int> m1;
    m1["test"] = 6;
    m1["inna"] = 8;
    cout << m1["test"] << endl;*/

    /*set <string> s1;
    s1.insert("test");
    s1.insert("inna");
    s1.insert("dana");
    set <string>::iterator it = s1.find("inna");

    if(it != s1.end())
        cout << "Istnieje " << *it <<endl;
    else
        cout << "Nie istnieje" << endl;*/

    /*vector <int> v1;
    v1.push_back(4);
    v1.push_back(2);
    v1.push_back(7);
    v1.push_back(1);

    sort(v1.begin(), v1.begin()+3);

    for(int i = 0; i < v1.size(); i++)
        cout << v1[i] << endl;*/

    /*int a = 7;
    int b = 11;
    cout << a << " " << b << endl;
    swap (a,b);
    cout << a << " " << b << endl;*/


    return 0;
}

int mn(int a, int b){
    return a * b;
}

int dod(int a, int b){
    return a + b;
}
